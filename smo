# smoothing

import numpy as np
import matplotlib.pyplot as plt

yt = np.array([
    48.7, 45.8, 46.4, 46.2, 44.0,
    53.8, 47.6, 47.0, 47.6, 51.1,
    49.1, 46.7, 47.8, 45.8, 45.5,
    49.2, 54.8, 44.7, 51.1, 47.3,
    45.3, 43.3, 44.6, 47.1, 53.4,
    44.9, 50.5, 48.1, 45.4, 51.6,
    50.8, 46.4, 52.3, 50.5, 53.4,
    53.9, 52.3, 53.0, 48.6, 52.4,
    47.9, 49.5, 44.0, 53.8, 52.5,
    52.0, 50.6, 48.7, 51.4, 47.7
], dtype=float)

n = len(yt)
time = np.arange(n)

alpha = 0.3

# First-order smoothing
first_order = [yt[0]]
for t in range(1, n):
    s_t = alpha * yt[t] + (1 - alpha) * first_order[-1]
    first_order.append(s_t)

# Second-order smoothing (Brown's method)
y1 = np.zeros(n)
y2 = np.zeros(n)
yhat = np.zeros(n)

y1[0] = yt[0]
y2[0] = yt[0]
yhat[0] = yt[0]

for t in range(1, n):
    y1[t] = alpha * yt[t] + (1 - alpha) * y1[t - 1]
    y2[t] = alpha * y1[t] + (1 - alpha) * y2[t - 1]
    yhat[t] = 2 * y1[t] - y2[t]

d = yt - yhat
mean_d = np.mean(d)
std_d = np.std(d, ddof=1)
n = len(d)

t_stat = mean_d / (std_d / np.sqrt(n))
print("t-statistic:", t_stat)

# Plot
plt.figure(figsize=(12,6))
plt.plot(time, yt, label='Actual Data', marker='o')
plt.plot(time, first_order, label='First Order Exp. Smoothing', linestyle='--')
plt.plot(time, yhat, label="Second Order Exp. Smoothing", linestyle='-.')
plt.xlabel("Time")
plt.ylabel("Value")
plt.title("First & Second Order Exponential Smoothing")
plt.legend()
plt.grid(True)
plt.show()
