#MILNE'S AND ADAM BASHFORD
import numpy as np
def f(x, y):
    return ((1 + x**2) * y**2)/2

x0 = 0
y0 = 1
h = 0.1
x_target = 0.4
num_steps = int((x_target - x0) / h)

x_values = [x0]
y_values = [y0]

for i in range(num_steps):
    x0 += h
    y0 = y0 + h * f(x0, y0)
    x_values.append(x0)
    y_values.append(y0)

def adams_bashforth(x_values, y_values):
    n = len(x_values)
    y_predicted = y_values[n - 1] + (h / 24) * (
        55 * f(x_values[n - 1], y_values[n - 1]) -
        59 * f(x_values[n - 2], y_values[n - 2]) +
        37 * f(x_values[n - 3], y_values[n - 3]) -
        9 * f(x_values[n - 4], y_values[n - 4])
    )
    return y_predicted

def milne_predictor_corrector(x_values, y_values):
    n = len(x_values)
    y_predicted = y_values[n - 1] + (4 * h / 3) * (
        2 * f(x_values[n - 1], y_values[n - 1]) -
        f(x_values[n - 2], y_values[n - 2]) +
        2 * f(x_values[n - 3], y_values[n - 3])
    )
    return y_predicted

y_adams_bashforth = adams_bashforth(x_values, y_values)
y_milne_predictor_corrector = milne_predictor_corrector(x_values, y_values)

print(f"y(0.4) by Adams-Bashforth: {y_adams_bashforth:.4f}")
print(f"y(0.4) by Milne's Predictor-Corrector: {y_milne_predictor_corrector:.4f}")
