import matplotlib.pyplot as plt

def forwardInterpolation(x, y):
  n = len(x)
  table = np.zeros((n, n))
  for i in range(n):
    table[i][0] = y[i]
  for j in range(1, n):
    for i in range(n-j):
      table[i][j] = table[i+1][j-1] - table[i][j-1]
  return table

def backwardInterpolation(x, y):
  n = len(x)
  table = np.zeros((n, n))
  for i in range(n):
    table[i][0] = y[i]
  
  for j in range(1, n):
    for i in range(n-j):
      table[i][j] = table[i][j-1] - table[i+1][j-1]
  return table

def interpolate(x, y, point, method):
  n = len(x)
  result = 0
  if method == "forward":
    table = forwardInterpolation(x, y)
  elif method == "backward":
    table = backwardInterpolation(x, y)
  else:
    raise ValueError('invalid interpolation method')
  for i in range(n):
    term = table[0][i]
    for j in range(i):
      term *= (point-x[j]) / (x[i]-x[j])
    result += term
  return result

x = [3, 4, 5, 6, 7, 8, 9]
y = [4.8, 8.4, 14.5, 23.6, 36.2, 52.8, 73.9]
interPoint1 = 3.5
interPoint2 = 8.5
forwardInterVal = interpolate(x, y, interPoint1, method = "forward")
backwardInterVal = interpolate(x, y, interPoint2, method = "backward")
forwardTable = forwardInterpolation(x, y)

print('forward interpolation table: ')
for row in forwardTable:
  print(row)

backwardTable = backwardInterpolation(x, y)
print('\nbackward interpolation table: ')
for row in backwardTable:
  print(row)

print('interpolated value using forward interpolation is: ', forwardInterVal)
print('interpolated value using backward interpolation is: ', backwardInterVal)
def interpolatedPolynomial(p, y, method):
  n = len(x)
  res = 0
  if method == "forward":
    table = forwardInterpolation(x, y)
  elif method == "backward":
    table = backwardInterpolation(x, y)
  for i in range(n):
    term = table[0][i]
    for j in range(i):
      term *= (p-x[j]) / (x[i]-x[j])
    res += term
  return res

xVal = np.linspace(min(x), max(x), 100)
forward_yVal = [interpolatedPolynomial(x, y, method ="forward") for x in xVal]
backward_yVal = [interpolatedPolynomial(x, y, method ="backward") for x in xVal]
plt.figure(figsize=(12, 6))
plt.plot(xVal, forward_yVal, color = "blue")
plt.plot(xVal, backward_yVal, color = "green")
plt.show()
