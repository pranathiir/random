#ipFile = open('grammar.txt')
#grammar = {}
inputString = input("input string (with space) : ")
inputList = inputString.split() + ['$']

parseTable = {
    '+': {'+': '>', '-': '>', '*': '<', '/': '<', 'id': '<', '$': '>'},
    '-': {'+': '>', '-': '>', '*': '<', '/': '<', 'id': '<', '$': '>'},
    '*': {'+': '>', '-': '>', '*': '>', '/': '>', 'id': '<', '$': '>'},
    '/': {'+': '>', '-': '>', '*': '>', '/': '>', 'id': '<', '$': '>'},
    'id': {'+': '>', '-': '>', '*': '>', '/': '>', 'id': '', '$': '>'},
    '$': {'+': '<', '-': '<', '*': '<', '/': '<', 'id': '<', '$': ''}
}

grammar = [
    {'lhs': 'E', 'rhs': ['E', '+', 'E']},
    {'lhs': 'E', 'rhs': ['E', '-', 'E']},
    {'lhs': 'E', 'rhs': ['E', '*', 'E']},
    {'lhs': 'E', 'rhs': ['E', '/', 'E']},
    {'lhs': 'E', 'rhs': ['id']},
]

stack = ['$']
precedence = "<"
print("------------------------------------------------------")
print(f"{'stack':<20}{'precedence':<15}{'input':<20}")
print("------------------------------------------------------")

print(f"{' '.join(stack):<20}{precedence:<15}{' '.join(inputList):<20}")
stackVals = []
precVals = []
inputVals = []

while inputList:
    #topSymbol = stack[-1] if stack[-1] in parseTable.keys() else stack[-2]
    if stack[-1] in parseTable.keys():
      print('s-1: ', stack[-1])
      topSymbol = stack[-1]
    else:
      print('s-2: ', stack[-2])
      topSymbol = stack[-2]
    nextInput = inputList[0]

    precedence = parseTable[topSymbol].get(nextInput, '')

    if precedence == '<' or precedence == '=':
        stack.append(inputList.pop(0))

    elif precedence == '>':
        if 'id' in stack:
            while 'id' in stack:
                idx = stack.index('id')
                stack[idx] = 'E'  #id->E
        elif len(stack) >= 3 and stack[-2] in ['+', '-', '*', '/'] and (stack[-3] == 'E' or stack[-1] == 'E'):
            stack = stack[:-3] + ['E']
        else:
            print("cannot be reduced")
            break
    else:
        print("not valid precednece relation")
        break

    stackVals.append(' '.join(stack))
    precVals.append(precedence)
    inputVals.append(' '.join(inputList))

    if stack == ['$', 'E'] and inputList == ['$']:
        precVals.append("string accepted")
        break

del precVals[0]
for i in range(len(stackVals)):
  print(f"{stackVals[i]:<20}{precVals[i]:<15}{inputVals[i]:<20}")
