#hmm
import numpy as np

class HiddenMarkovModel:
    def __init__(self, states, observations, initProbs, transitionMatrix, emissionMatrix):
        self.states = states
        self.observations = observations
        self.initProbs = initProbs
        self.transitionMatrix = transitionMatrix
        self.emissionMatrix = emissionMatrix

    def forwardAlgo(self, observationSeq):
        T = len(observationSeq)
        N = len(self.states)
        alpha = np.zeros((T, N))

        alpha[0] = self.initProbs * self.emissionMatrix[ :, self.observations.index(observationSeq[0])]

        for t in range(1, T):
            for j in range(N):
                alpha[t, j] = np.sum(alpha[t-1] * self.transitionMatrix[:, j]) * self.emissionMatrix[j, self.observations.index(observationSeq[t])]

        return alpha

    def backwardAlgo(self, observationSeq):
        T = len(observationSeq)
        N = len(self.states)
        beta = np.zeros((T, N))

        beta[-1] = 1

        for t in range(T-2, -1, -1):
            for i in range(N):
                beta[t, i] = np.sum(beta[t+1] * self.transitionMatrix[i, :] * self.emissionMatrix[:, self.observations.index(observationSeq[t+1])])

        return beta

    def predictSeqProb(self, observationSeq):
        alpha = self.forwardAlgo(observationSeq)
        return np.sum(alpha[-1])

    def predictStateSeq(self, observationSeq):
        T = len(observationSeq)
        N = len(self.states)
        delta = np.zeros((T, N))
        psi = np.zeros((T, N))

        delta[0] = self.initProbs * self.emissionMatrix[:, self.observations.index(observationSeq[0])]

        for t in range(1, T):
            for j in range(N):
                delta[t, j] = np.max(delta[t-1] * self.transitionMatrix[:, j]) * self.emissionMatrix[j, self.observations.index(observationSeq[t])]
                psi[t, j] = np.argmax(delta[t-1] * self.transitionMatrix[:, j])

        stateSeq = [np.argmax(delta[-1])]
        for t in range(T-2, -1, -1):
            stateSeq.insert(0, int(psi[t+1, stateSeq[0]]))

        return [self.states[i] for i in stateSeq]

states = ['Sunny', 'Rainy']
observations = ['Walk', 'Shop', 'Clean']
initProbs = np.array([0.6, 0.4])
transitionMatrix = np.array([[0.7, 0.3],
                               [0.4, 0.6]])
emissionMatrix = np.array([[0.1, 0.4, 0.5],
                             [0.6, 0.3, 0.1]])

hmm = HiddenMarkovModel(states, observations, initProbs, transitionMatrix, emissionMatrix)

observationSeq = ['Walk', 'Shop', 'Clean']
probability = hmm.predictSeqProb(observationSeq)
stateSeq = hmm.predictStateSeq(observationSeq)

print("probability of observing sequence {} is {:.4f}".format(observationSeq, probability))
print("most likely state sequence: ", stateSeq)
