class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def isOperator(char):
    return char in ['+', '-', '*', '/']

def constructParseTree(postfixexp):
    stack = []
    for token in postfixexp.split():
        if not isOperator(token):
            stack.append(TreeNode(token))
        else:
            if len(stack) < 2:
                raise ValueError("Invalid postfix expression")
            rNode = stack.pop()
            lNode = stack.pop()
            opNode = TreeNode(token)
            opNode.left = lNode
            opNode.right = rNode
            stack.append(opNode)
    if len(stack) != 1:
        raise ValueError("Invalid postfix expression")
    return stack[0]

def printTree(node, level=0, position="Root"):
    if node is not None:
        print('  ' * level + position + ": " + str(node.value))
        printTree(node.left, level + 1, "Left")
        printTree(node.right, level + 1, "Right")

def infix_to_postfix(expression):
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2}

    output = []
    operator_stack = []

    for token in expression.split():
        if token.isdigit():
            output.append(token)
        elif token == '(':
            operator_stack.append(token)
        elif token == ')':
            while operator_stack and operator_stack[-1] != '(':
                output.append(operator_stack.pop())
            operator_stack.pop()  
        else: 
            while operator_stack and precedence.get(token, 0) <= precedence.get(operator_stack[-1], 0):
                output.append(operator_stack.pop())
            operator_stack.append(token)
    while operator_stack:
        output.append(operator_stack.pop())
    return ' '.join(output)

infixexp = "3 + 4 * ( 2 - 1 )"
postfixexp = infix_to_postfix(infixexp)
parseTree = constructParseTree(postfixexp)
print("Parse tree:")
printTree(parseTree)
