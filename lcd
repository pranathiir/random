// Loop-carried dependence using OpenMP
#include <stdio.h>
#include <omp.h>
#define N 10
int main() {
    int A[N], B[N], C[N];
    // Initialize arrays A and B
    for (int i = 0; i < N; i++) {
        A[i] = i + 1;
        B[i] = (i + 1) * 2;
    }
    // Handling loop-carried dependence
    C[0] = A[0] + B[0]; // First element is initialized separately
    #pragma omp parallel
    {
        #pragma omp single
        {
            for (int i = 1; i < N; i++) {
                #pragma omp task depend(in:C[i-1]) depend(out:C[i])
                {
                    C[i] = A[i] + B[i] + C[i-1];
                }
            }
        }
    }
    // Display the result
    printf("Array C:\n");
    for (int i = 0; i < N; i++) {
        printf("%d ", C[i]);
    }
    printf("\n");
    return 0;
}
