///windmill
///2nd
#include<windows.h>
#include<GL/glut.h>
#include<cmath>
using namespace std;

float angle = 0.0f;
float speed = 1.0f;

void blades()
{
    glColor3f(0.4, 0.4, 0.8);
    glBegin(GL_TRIANGLES);
        glVertex2f(0, 0);
        glVertex2f(0.3, 0.2);
        glVertex2f(0.3, -0.2);
    glEnd();
}

void windmill()
{
    glPushMatrix();
    glColor3f(1, 1, 1);
    glBegin(GL_QUADS);
        glVertex2f(-0.1, -1);
        glVertex2f(0.1, -1);
        glVertex2f(0.1, -0.3);
        glVertex2f(-0.1, -0.3);
    glEnd();

    glTranslatef(0.0f, -0.3f, 0.0f);
    glRotatef(angle, 0.0f, 0.0f, 1.0f);
    glColor3f(0.8, 0.8, 0.8);

    for(int i=0; i<3; i++)
    {
        blades();
        glRotatef(120.0f, 0.0f, 0.0f, 1.0f);
    }

    glPopMatrix();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();
    windmill();
    glFlush();
    glutSwapBuffers();
}

void update(int value)
{
    angle += speed;

    if (angle > 360.0f)
    {
        angle -= 360.0f;
    }

    glutPostRedisplay();
    glutTimerFunc(10, update, 0);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutCreateWindow("OpenGl");
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0);

    glutDisplayFunc(display);
    glutTimerFunc(10, update, 0);

    glutMainLoop();
    return 0;
}
