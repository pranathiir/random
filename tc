#Fuzzy Control System example
import matplotlib.pyplot as plt
     
#Speed Diff, Acceleration & Throttle Control

height = 1
memVals = {
  "nm": [31, 61, 95],
  "ns": [61, 95, 127],
  "ze": [95, 127, 159],
  "ps": [127, 159, 191],
  "pm": [159, 191, 223],
  "nl": [0, 0, 31, 61],
  "pl": [191, 223, 255, 280],
}
rules = [["nl", "ze", "pl"],
         ["ze", "nl", "pl"],
         ["nm", "ze", "pm"],
         ["ns", "ps", "ps"],
         ["ps", "ns", "ns"],
         ["pl", "ze", "nl"],
         ["ze", "ns", "ps"],
         ["ze", "nm", "pm"]]
     

def isValidRule(speedRule, speed, accRule, acc):
    memSpeed = memVals[speedRule]
    memAcc = memVals[accRule]

    if memSpeed[0] <= speed and speed <=memSpeed[-1]:
        if memAcc[0] <= acc and acc <= memAcc[-1]:
            return True
    
    return False

def fuzzyfication(rule, speed, acc):
    memSpeed = memVals[rule[0]]
    memAcc = memVals[rule[1]]

    uSpeed = max(min( (speed - memSpeed[0])/(memSpeed[1]- memSpeed[0]), (memSpeed[2]-speed)/(memSpeed[2]-memSpeed[1])), 0)
    uAcc = max(min((acc - memAcc[0])/ (memAcc[1] - memAcc[0]), (memAcc[2] - acc)/ (memAcc[2]- memAcc[1])), 0)

    return min(uAcc, uSpeed)
     

def calcAreaweightedArea(rule, fuzzVal):
    throtmem = memVals[rule[2]]
    
    m1 = (1-0)/(throtmem[1] - throtmem[0])
    m2 = (0-1)/(throtmem[2] - throtmem[1])
    
    a1 = (fuzzVal - 0 + m1*throtmem[0])/m1
    a2 = (fuzzVal - 1 + m2*throtmem[1])/m2
    
    a = a2 - a1
    b = throtmem[2] - throtmem[0]
    
    plt.plot([a1, a2], [fuzzVal, fuzzVal])
    
    area = 0.5 * fuzzVal * (a+b)
    weighted_area = area*throtmem[1]
    
    return (area, weighted_area)
     
def plotGraph():
  for label in memVals:
    if len(memVals[label]) == 4:
      plt.plot(memVals[label], [0, 1, 1, 0], label=label)
    else:
      plt.plot(memVals[label], [0, 1, 0], label=label)  

def calcThrottleControl(speed, acc):
    weightedAreaSum = 0
    areaSum = 0
    
    for rule in rules:
        if isValidRule(rule[0], speed, rule[1], acc):
            print(rule)
            fuzzVal = fuzzyfication(rule, speed, acc)
            x, y = calcAreaweightedArea(rule, fuzzVal)
            areaSum += x
            weightedAreaSum += y
            
    print(weightedAreaSum/areaSum)

def fuzzyControlSystem():
    plotGraph()
    
    plt.xlabel("throttleControl")
    plt.ylabel("membershipValue")
    
    calcThrottleControl(70, 130)

    plt.legend()
    plt.show()

fuzzyControlSystem()
