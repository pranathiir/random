#include <GL/glut.h>
#include <iostream>
#include <vector>

// Define region codes
const int INSIDE = 0; // 0000
const int LEFT = 1;   // 0001
const int RIGHT = 2;  // 0010
const int BOTTOM = 4; // 0100
const int TOP = 8;    // 1000

// Define window boundaries
const int X_MIN = 100;
const int X_MAX = 400;
const int Y_MIN = 100;
const int Y_MAX = 400;

bool isMouseDown = false;
float x1, y1, x2, y2;
std::vector<std::pair<float, float>> originalLines;
std::vector<std::pair<float, float>> clippedLines;

// Function to calculate region code for a point
int computeCode(float x, float y) {
    int code = INSIDE;

    if (x < X_MIN)
        code |= LEFT;
    else if (x > X_MAX)
        code |= RIGHT;
    if (y < Y_MIN)
        code |= BOTTOM;
    else if (y > Y_MAX)
        code |= TOP;

    return code;
}

// Function to clip a line segment
void cohenSutherland(float x1, float y1, float x2, float y2) {
    int code1 = computeCode(x1, y1);
    int code2 = computeCode(x2, y2);
    bool accept = false;

    while (true) {
        if (!(code1 | code2)) {
            accept = true;
            break;
        } else if (code1 & code2) {
            break;
        } else {
            float x, y;
            int codeOut = code1 ? code1 : code2;

            // Calculate intersection point
            if (codeOut & TOP) {
                x = x1 + (x2 - x1) * (Y_MAX - y1) / (y2 - y1);
                y = Y_MAX;
            } else if (codeOut & BOTTOM) {
                x = x1 + (x2 - x1) * (Y_MIN - y1) / (y2 - y1);
                y = Y_MIN;
            } else if (codeOut & RIGHT) {
                y = y1 + (y2 - y1) * (X_MAX - x1) / (x2 - x1);
                x = X_MAX;
            } else {
                y = y1 + (y2 - y1) * (X_MIN - x1) / (x2 - x1);
                x = X_MIN;
            }

            // Update intersection point and code
            if (codeOut == code1) {
                x1 = x;
                y1 = y;
                code1 = computeCode(x1, y1);
            } else {
                x2 = x;
                y2 = y;
                code2 = computeCode(x2, y2);
            }
        }
    }

    if (accept) {
        clippedLines.push_back(std::make_pair(x1, y1));
        clippedLines.push_back(std::make_pair(x2, y2));
    }
}

// Function to handle mouse click events
void mouseClick(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        if (!isMouseDown) {
            x1 = x;
            y1 = 500 - y; // Invert y-coordinate to match OpenGL's coordinate system
            isMouseDown = true;
        } else {
            x2 = x;
            y2 = 500 - y; // Invert y-coordinate to match OpenGL's coordinate system
            isMouseDown = false;
            originalLines.push_back(std::make_pair(x1, y1));
            originalLines.push_back(std::make_pair(x2, y2));
            cohenSutherland(x1, y1, x2, y2);
            glutPostRedisplay(); // Trigger display update after second point selection
        }
    }
}

// Function to display the scene
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0, 0.0, 0.0); // Black color
    glBegin(GL_LINE_LOOP);
    glVertex2i(X_MIN, Y_MIN);
    glVertex2i(X_MAX, Y_MIN);
    glVertex2i(X_MAX, Y_MAX);
    glVertex2i(X_MIN, Y_MAX);
    glEnd();

    // Draw previously drawn original lines in blue color
    glColor3f(0.0, 0.0, 1.0); // Blue color
    for (size_t i = 0; i < originalLines.size(); i += 2) {
        glBegin(GL_LINES);
        glVertex2f(originalLines[i].first, originalLines[i].second);
        glVertex2f(originalLines[i + 1].first, originalLines[i + 1].second);
        glEnd();
    }

    // Draw clipped lines in red color
    glColor3f(1.0, 0.0, 0.0); // Red color
    for (size_t i = 0; i < clippedLines.size(); i += 2) {
        glBegin(GL_LINES);
        glVertex2f(clippedLines[i].first, clippedLines[i].second);
        glVertex2f(clippedLines[i + 1].first, clippedLines[i + 1].second);
        glEnd();
    }

    if (isMouseDown) {
        glColor3f(1.0, 0.0, 0.0); // Red color
        glBegin(GL_POINTS);
        glVertex2f(x1, y1);
        glEnd();
    }

    glFlush();
}

// Function to initialize OpenGL
void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0); // White background color
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 500, 0, 500);
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Cohen-Sutherland Line Clipping");

    glutMouseFunc(mouseClick); // Register mouse click callback
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
