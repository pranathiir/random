class ShiftReduceParser:
    def __init__(self, grammar):
        self.grammar = grammar
        self.stack = []

    def parse(self, inputString):
        self.stack = []
        inputList = inputString.split()
        inputList.append('$')
        self.stack.append('$')

        while inputList:
            print(f"Stack: {self.stack}, Input: {inputList}")
            actionFound = False

            #reduce
            for rule in self.grammar:
                if len(self.stack) >= len(rule['rhs']):
                    if self.stack[-len(rule['rhs']):] == rule['rhs']:
                        for _ in range(len(rule['rhs'])):
                            self.stack.pop()
                        self.stack.append(rule['lhs'])
                        actionFound = True
                        print(f"Reduce using: {rule['lhs']} -> {' '.join(rule['rhs'])}")
                        break

            if not actionFound:
                if inputList[0] == '$' and self.stack == ['$', 'S']:
                    print("Input accepted")
                    return True
                elif inputList[0] != '$':
                    # Shift
                    shiftSymbol = inputList.pop(0)
                    self.stack.append(shiftSymbol)
                    print(f"Shift: {shiftSymbol}")
                else:
                    print("Input rejected")
                    return False

grammar = [
    {'lhs': 'S', 'rhs': ['S', '+', 'S']},
    {'lhs': 'S', 'rhs': ['S', '*', 'S']},
    {'lhs': 'S', 'rhs': ['id']},
]
parser = ShiftReduceParser(grammar)
inputString = input("Enter a string (with space) : ")
parser.parse(inputString)
