Remove all HTML tags

%{
%}

%%
# Match an HTML tag (from opening '<' to closing '>')
"<"[^>]*> { /* Do nothing to remove the HTML tag */ }

# Match any single character (other than a newline) and print it
[^<>] { printf("%s", yytext); }

# Match newlines and print them to keep the original line structure
\n { printf("\n"); }

. ;

%%

main(int argc, char *argv[]) {
    extern FILE *yyin;
    if (argc < 2) {
        fprintf(stderr, "Usage: %s filename\n", argv[0]);
        return 1;
    }
    yyin = fopen(argv[1], "r");
    if (yyin == NULL) {
        perror("Error opening file");
        return 1;
    }
    yylex();
    printf("\n");
    fclose(yyin);
    return 0;
}



#######################################################################################

Valid Email or not:

%{
#include <stdio.h>
%}

%%
# Define a pattern that matches a valid email ID
# A valid email ID consists of a local part followed by '@' and a domain part.
# Local part: allows alphanumeric characters, underscores, and dots.
# Domain part: consists of alphanumeric characters and dots.

^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ {
    printf("Valid E-mail ID\n");
}

# If it doesn't match the email ID pattern, print an error message
. {
    printf("Invalid E-mail ID\n");
}

%%

int main(int argc, char* argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <email>\n", argv[0]);
        return 1;
    }
    
    char* email = argv[1];
    
    // Create a buffer for the input email
    YY_BUFFER_STATE buffer = yy_scan_string(email);
    
    // Process the input email using yylex
    yylex();
    
    // Destroy the buffer after processing
    yy_delete_buffer(buffer);
    
    return 0;
}
